 enum PrimitiveType {
  "i8",
  "u8",
  "i16",
  "u16",
  "i32",
  "u32",
  "i64",
  "u64",
  "f32",
  "f64",
  "bool",
  "string",
  "datetime",
  "bytes",
  "raw",
  "value"
};

typedef (NamespaceDefinition or TypeDefinition or AliasDefinition or ImportDefinition or InterfaceDefinition or RoleDefinition or EnumDefinition or DirectiveDefinition) Definition;

typedef (IntValue or FloatValue or StringValue or BooleanValue or EnumValue or ListValue or ObjectValue) LiteralValue;

typedef (PrimitiveType or Named or ListType or MapType or Optional) TypeReference;

typedef (
  Value or
  Document or
  Annotation or
  Argument or
  DirectiveRequire or
  ImportName or
  AliasDefinition or
  ImportDefinition or
  TypeDefinition or
  OperationDefinition or
  FieldDefinition or
  ParameterDefinition or
  InterfaceDefinition or
  RoleDefinition or
  UnionDefinition or
  EnumDefinition or
  EnumValueDefinition or
  DirectiveDefinition or
  ListType or
  MapType or
  Optional or
  IntValue or
  FloatValue or
  StringValue or
  BooleanValue or
  EnumValue or
  ListValue or
  ObjectValue or
  ObjectField ) AstNode;

interface Node {
  readonly attribute string kind;
};

interface Value : Node {
  attribute PrimitiveType value;
};

interface Document : Node {
  attribute sequence<Definition> definitions;
};

interface Annotation : Node {
    attribute Name name;
    attribute sequence<Argument> arguments;
};

interface Argument : Node {
    attribute Name name;
    attribute Value value;
};

interface DirectiveRequire : Node {
    attribute Name directive;
    attribute sequence<Location> locations;
};

interface ImportName : Node {
    attribute Name name;
    attribute Name? alias;
};

interface NamespaceDefinition : Node {
    attribute StringValue name;
    attribute StringValue? description;
    attribute sequence<Annotation>? annotations;
};

interface AliasDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute TypeReference type;
    attribute sequence<Annotation>? annotations;
};

interface ImportDefinition : Node {
    attribute StringValue? description;
    attribute boolean all;
    attribute sequence<ImportName> names;
    attribute StringValue from;
    attribute sequence<Annotation>? annotations;
};

interface TypeDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute sequence<Named>? interfaces;
    attribute sequence<FieldDefinition> fields;
    attribute sequence<Annotation>? annotations;
};

interface OperationDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute sequence<ParameterDefinition> parameters;
    attribute TypeReference type;
    attribute boolean unary;
    attribute sequence<Annotation>? annotations;
};

interface FieldDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute TypeReference type;
    attribute Value? default;
    attribute sequence<Annotation>? annotations;
};

interface ParameterDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute TypeReference type;
    attribute Value? default;
    attribute sequence<Annotation>? annotations;
};

interface InterfaceDefinition : Node {
    attribute StringValue? description;
    attribute sequence<OperationDefinition> operations;
    attribute sequence<Annotation>? annotations;
};

interface RoleDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute sequence<OperationDefinition> operations;
    attribute sequence<Annotation>? annotations;
};

interface UnionDefinition : Node {

    attribute Name name;
    attribute StringValue? description;
    attribute sequence<Named> types;
    attribute sequence<Annotation>? annotations;
};
interface EnumDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute sequence<EnumValueDefinition> values;
    attribute sequence<Annotation>? annotations;
};

interface EnumValueDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute IntValue index;
    attribute StringValue? display;
    attribute sequence<Annotation>? annotations;
};

interface DirectiveDefinition : Node {
    attribute Name name;
    attribute StringValue? description;
    attribute sequence<ParameterDefinition> parameters;
    attribute sequence<Name> locations;
    attribute sequence<DirectiveRequire> requires;
};

interface Name : Node {
    attribute string value;
};

interface Named : Node {
    attribute Name name;
};

interface ListType : Node {
    attribute TypeReference type;
};

interface MapType : Node {
    attribute TypeReference keytype;
    attribute TypeReference valuetype;
};

interface Optional : Node {
    attribute TypeReference type;
};

interface IntValue : Node {
    attribute unsigned_long_long value;
};
interface FloatValue : Node {
    attribute double value;
};

interface StringValue : Node {
    attribute string value;
};

interface BooleanValue : Node {

    attribute boolean value;
};

interface EnumValue : Node {

    attribute string value;
};

interface ListValue : Node {

    attribute sequence<Value> value;
};

interface ObjectValue : Node {

    attribute sequence<ObjectField> fields;
};

interface ObjectField : Node {

    attribute Name name;
    attribute Value value;
};
